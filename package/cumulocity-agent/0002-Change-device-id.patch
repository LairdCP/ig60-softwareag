diff -Naur a/src/demoagent.cc b/src/demoagent.cc
--- a/src/demoagent.cc	2021-01-05 14:24:16.000000000 +0000
+++ b/src/demoagent.cc	2021-04-05 16:45:13.754227386 +0000
@@ -127,34 +127,22 @@
     return 0;
 }
 
-static string searchPathForDeviceID(const string &path)
-{
-    ifstream in(path);
-    auto beg = istreambuf_iterator<char>(in);
-    string s;
-    const auto isAlnum = [](char c) { return isalnum(c); };
-
-    copy_if(beg, istreambuf_iterator<char>(), back_inserter(s), isAlnum);
-
-    return s;
-}
 
-static string searchTextForSerial(const string &path)
+static string searchPathForMacAddress(const string &path)
 {
-    ifstream in(path);
+ ifstream in(path);
     string s;
+    string prefix="";
     const auto isAlnum = [](char c) { return isalnum(c); };
 
     for (string sub; getline(in, sub);)
     {
-        if (sub.compare(0, 6, "Serial") == 0)
-        {
-            copy_if(sub.begin() + 6, sub.end(), back_inserter(s), isAlnum);
-            break;
-        }
+        
+            copy_if(sub.begin(), sub.end(), back_inserter(s), isAlnum);
+      
     }
-
-    return s;
+    s.erase(std::remove(s.begin(),s.end(),':'),s.end());
+    return prefix.append(s);  
 }
 
 static string getDeviceID(ConfigDB &cdb)
@@ -169,41 +157,13 @@
     if (isValid(s))
             return s;
 
-    // Devices with BIOS
-    s = searchPathForDeviceID("/sys/devices/virtual/dmi/id/product_serial");
-    if (isValid(s))
-    {
-        return s;
-    }
-
-    // Raspberry PI
-    s = searchTextForSerial("/proc/cpuinfo");
-    if (!s.empty())
-    {
-        return s;
-    }
-
-    // Virtual Machine
-    s = searchPathForDeviceID("/sys/devices/virtual/dmi/id/product_uuid");
-    if (isValid(s))
-    {
-        return s;
-    }
-
-    // AWS Paravirtual Instance
-    s = searchPathForDeviceID("/sys/hypervisor/uuid");
-    if (isValid(s))
-        return s;
 
-    // dbus - interprocess communication (IPC) devices
-    s = searchPathForDeviceID("/var/lib/dbus/machine-id");
+      s = searchPathForMacAddress("/sys/class/net/wlan0/address");
     if (isValid(s))
     {
         return s;
     }
 
-    // systemd (init system)
-    s = searchPathForDeviceID("/etc/machine-id");
 
     return isValid(s) ? s : "";
 }
diff -Naur a/src/integrate.cc b/src/integrate.cc
--- a/src/integrate.cc	2021-01-05 14:24:16.000000000 +0000
+++ b/src/integrate.cc	2021-04-05 16:45:13.754227386 +0000
@@ -74,9 +74,11 @@
         string s = "301,";
         string model, rev;
         getHardware(model, rev);
-        s += model.empty() ? "Cumulocity-Agent" : model + " " + rev;
-        s += " (" + agent.deviceID() + "),20";
+	//        s += model.empty() ? "Cumulocity-Agent" : model + " " + rev;
+        //s += " (" + agent.deviceID() + "),20";
 
+	s+="Laird IG60,20";
+	
         if (http.post(s) <= 0)
         {
             return -1;
diff -Naur a/srtemplate.txt b/srtemplate.txt
--- a/srtemplate.txt	2021-01-05 14:24:16.000000000 +0000
+++ b/srtemplate.txt	2021-04-05 16:56:59.498227386 +0000
@@ -1,9 +1,9 @@
-cumulocity-agent_4.2.9
+Laird_IG60_agent
 
 10,300,GET,/identity/externalIds/c8y_Serial/%%,,application/vnd.com.nsn.cumulocity.externalId+json,%%,STRING,
 
 # Device Capability
-10,301,POST,/inventory/managedObjects,application/json,application/json,%%,STRING UNSIGNED,"{""name"":""%%"",""type"":""c8y_cumulocity_agent"",""c8y_IsDevice"":{},""com_cumulocity_model_Agent"":{},""c8y_RequiredAvailability"":{""responseInterval"":%%}}"
+10,301,POST,/inventory/managedObjects,application/json,application/json,%%,STRING UNSIGNED,"{""name"":""%%"",""type"":""Laird IG60"",""c8y_IsDevice"":{},""com_cumulocity_model_Agent"":{""name"":""test""},""c8y_RequiredAvailability"":{""responseInterval"":%%}}"
 
 10,302,POST,/identity/globalIds/%%/externalIds,application/json,,%%,STRING STRING,"{""externalId"":""%%"",""type"":""c8y_Serial""}"
 
@@ -11,7 +11,7 @@
 
 10,304,PUT,/devicecontrol/operations/%%,application/json,,%%,UNSIGNED STRING,"{""status"":""FAILED"",""failureReason"":""%%""}"
 
-10,305,PUT,/inventory/managedObjects/%%,application/json,,%%,UNSIGNED STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING INTEGER STRING STRING STRING STRING STRING INTEGER,"{""c8y_Network"":{""c8y_WAN"":{""simStatus"":""%%"",""apn"":""%%"",""username"":""%%"",""password"":""%%"",""authType"":""%%"",""ip"":""%%""},""c8y_LAN"":{""name"":""%%"",""mac"":""%%"",""ip"":""%%"",""netmask"":""%%"",""enabled"":%%},""c8y_DHCP"":{""addressRange"":{""start"":""%%"",""end"":""%%""},""dns1"":""%%"",""dns2"":""%%"",""domainName"":""%%"",""enabled"":%%}}}"
+10,305,PUT,/inventory/managedObjects/%%,application/json,,%%,UNSIGNED STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING INTEGER STRING STRING STRING STRING STRING INTEGER,"{""c8y_Network"":{""c8y_WAN"":{""simStatus"":""%%"",""apn"":""%%"",""user"":""%%"",""password"":""%%"",""authType"":""%%"",""ip"":""%%""},""c8y_LAN"":{""name"":""%%"",""mac"":""%%"",""ip"":""%%"",""netmask"":""%%"",""enabled"":%%},""c8y_DHCP"":{""addressRange"":{""start"":""%%"",""end"":""%%""},""dns1"":""%%"",""dns2"":""%%"",""domainName"":""%%"",""enabled"":%%}}}"
 
 10,306,PUT,/inventory/managedObjects/%%,application/json,,%%,UNSIGNED STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING NUMBER NUMBER NUMBER,"{""c8y_Mobile"":{""cellId"":""%%"",""mcc"":""%%"",""imei"":""%%"",""iccid"":""%%"",""mnc"":""%%"",""imsi"":""%%"",""lac"":""%%"",""msisdn"":""%%"",""connType"":""%%"",""currentOperator"":""%%"",""currentBand"":""%%"",""rssi"":""%%"",""ecn0"":""%%"",""rcsp"":""%%""}}"
 
